import json
import time
import paramiko
import requests
import os
from datetime import datetime

# Funcion para conectarse por SSH y ejecutar comandos en una VM
def execute_ssh_command(ip, username, password, command):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username=username, password=password)
        stdin, stdout, stderr = ssh.exec_command(command)
        output = stdout.read().decode()
        error = stderr.read().decode()
        ssh.close()
        if error:
            print(f"Error ejecutando comando '{command}': {error}")
        return output
    except Exception as e:
        print(f"Error ejecutando comando en {ip}: {e}")
        return None

# Funcion para descargar programas desde la API
def download_programs(api_config):
    base_url = api_config.get("base_url")
    downloads = api_config.get("downloads", [])
    local_paths = []

    for program in downloads:
        url = f"{base_url}/{program.get('path', '')}"
        output_path = program.get("output", f"./{program.get('path', '').split('/')[-1]}")

        try:
            print(f"Descargando desde {url}...")
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                with open(output_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                print(f"Archivo descargado y guardado en: {output_path}")
                local_paths.append(output_path)
            else:
                print(f"Error al descargar {url}: {response.status_code}")
        except Exception as e:
            print(f"Error descargando desde {url}: {e}")
    
    return local_paths

# Funcion para transferir archivos a una VM
def transfer_to_vm(ip, username, password, local_path, remote_path):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username=username, password=password)

        sftp = ssh.open_sftp()
        sftp.put(local_path, remote_path)
        sftp.close()
        ssh.close()
        print(f"Archivo {local_path} transferido a {remote_path}")
    except Exception as e:
        print(f"Error transfiriendo archivo a {ip}: {e}")

# Funcion para analizar archivos en una VM
def analyze_files_in_vm(ip, username, password, remote_paths, commands):
    analysis_results = []
    for remote_path in remote_paths:
        # Nombre del archivo analizado
        file_name = os.path.basename(remote_path)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"{file_name}_analizado_{timestamp}.txt"
        output_path = f"/home/{username}/{output_file}"

        # Ejecutar comandos de anÃ¡lisis
        for command in commands:
            full_command = f"{command} {remote_path} >> {output_path}"
            print(f"Ejecutando: {full_command}")
            execute_ssh_command(ip, username, password, full_command)

        print(f"Analisis completado. Resultados guardados en: {output_path}")
        analysis_results.append(output_path)

    return analysis_results

# Main
if __name__ == "__main__":
    try:
        # Leer archivo3.json (credenciales de las maquinas virtuales)
        with open("archivo3.json", "r") as f:
            vm_config = json.load(f)

        # Leer archivo4.json (configuracion para descargar programas)
        with open("archivo4.json", "r") as f:
            api_config = json.load(f)

        # Obtener las maquinas virtuales desde archivo3.json
        vm_monitor = next(vm for vm in vm_config["machines"] if vm["vm_name"] == "vmmonitor")
        vm_ubuntu = next(vm for vm in vm_config["machines"] if vm["vm_name"] == "ubuntu")

        # Descargar programas
        downloaded_files = download_programs(api_config)

        # Transferir archivos descargados a la VM Ubuntu
        remote_paths = []
        for local_path in downloaded_files:
            remote_path = f"/home/{vm_ubuntu['vm_user']}/{os.path.basename(local_path)}"
            transfer_to_vm(
                vm_ubuntu["vm_ip"],
                vm_ubuntu["vm_user"],
                vm_ubuntu["vm_password"],
                local_path,
                remote_path
            )
            remote_paths.append(remote_path)

        # Analizar archivos en la VM Ubuntu
        analyzed_files = analyze_files_in_vm(
            vm_ubuntu["vm_ip"],
            vm_ubuntu["vm_user"],
            vm_ubuntu["vm_password"],
            remote_paths,
            api_config["commands"]
        )

        print("Proceso completado. Archivos analizados:")
        for analyzed_file in analyzed_files:
            print(f"- {analyzed_file}")

    except Exception as e:
        print(f"Error: {e}")
