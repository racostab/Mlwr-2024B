from static import *
from dynamic import *
from dynamic_vms import dynamicTrafficAnalysis
import threading

class bcolors:
    GREEN = '\033[92m'
    ENDC = '\033[0m'

def staticAnalysis(filesToAnalyze, counter):
    myDocker = Docker()
    
    myVM = VM()
    myVM.connect()    
    
    if myDocker.slContainerRetrieved:
        myVM.send_files([filesToAnalyze, "./config/config_static.json"])
    else:
        myVM.run_command("pip install -r requirements.txt")    
        myVM.send_files([filesToAnalyze, "./config/config_static.json", "./staticLab/staticLab_containerCommands.py"])
    
    myVM.run_command(f"/opt/venv/bin/python3 staticLab_containerCommands.py {myVM.mlwrFile}")
    
    myDocker.getOutput(counter, myVM.username)
    myDocker.stopContainer()

    print(f"{bcolors.GREEN}Static{bcolors.ENDC}: analysis successful. Check -> ./experimentos/" + str(counter) + "/static for its output")

if __name__ == '__main__':   
    flag = isURL(sys.argv[1])
    if flag:
        try: 
            download_github_repo(sys.argv[1], "files/github")
            filesToAnalyze = "files/github/"
        except Exception as e:
            print(f"An error occurred: {e}")
    else:
        filesToAnalyze = sys.argv[1]

    if not os.path.exists("./experimentos"):
        os.mkdir("./experimentos")
        
    counter = 1
    for file in os.listdir("./experimentos"):
        counter+=1
    
    t1 = threading.Thread(target=staticAnalysis, args=(filesToAnalyze,counter))
    t2 = threading.Thread(target=dynamicAnalysis, args=(filesToAnalyze, counter))
    t3 = threading.Thread(target=dynamicTrafficAnalysis, args=(filesToAnalyze, counter))

    t1.start()
    t2.start()
    t3.start()

    t1.join()
    t2.join()
    t3.join()

    if flag:
        shutil.rmtree(filesToAnalyze,True)

    print("-"*10)
    print("Static and dynamic analysis are finished. Check -> ./experimentos/" + str(counter) + " for their output")
    print("-"*10)